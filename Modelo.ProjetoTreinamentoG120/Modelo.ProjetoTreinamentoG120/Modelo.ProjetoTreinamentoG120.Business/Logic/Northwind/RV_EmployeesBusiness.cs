//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Modelo.ProjetoTreinamentoG120.Business.Logic.Northwind
{
    
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.ComponentModel;
    using SGI.Common.BusinessContractor.Rules;
    using SGI.Common.BusinessContractor.Base;
    using Modelo.ProjetoTreinamentoG120.ModelData.Logic.Northwind.Model;

    /// <summary>
    /// RV_EmployeesBusiness class Business
    /// </summary>
    [RegraAtiva(true)]
    public class RV_EmployeesBusiness : GenericRuleEF<NorthwindEntities, Employees>
    {

        public RV_EmployeesBusiness(NorthwindEntities contexto, Employees instancia)
            : base(contexto, instancia)
        {
        }

        /// <summary>
        /// Executa a validação da regra
        /// </summary>
        public override bool Consistir()
        {
            try
            {
                // Todo Regra

                if (instancia.LastName.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo  não pode ser nulo"));
                    return false;
                }
                else if (instancia.LastName.Length >= 20)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo deve conter menos que 20 caracteres"));
                    return false;
                }
                if (instancia.FirstName.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                }
                else if (instancia.FirstName.Length >= 10)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo tem que ser menor que 10 caracteres"));
                    return false;
                }
                if (instancia.Title.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                if (instancia.Title.Length >= 30)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo deve ser menor que 30 caracteres"));
                    return false;
                }
                if (instancia.TitleOfCourtesy.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                else if (instancia.TitleOfCourtesy.Length >= 25)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo deve ser menor que 25 caracteres"));
                    return false;
                }
                if (instancia.Address.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                else if (instancia.Address.Length >= 60)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo deve ser menor que 60 caracteres"));
                    return false;
                }
                if (instancia.City.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                else if (instancia.City.Length >= 15)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ter menos que 15 caracteres"));
                    return false;
                }
                if (instancia.Region.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                else if (instancia.Region.Length >= 15)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo tem que ter menos que 15 caracteres"));
                    return false;
                }
                if (instancia.PostalCode.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                else if (instancia.PostalCode.Length >= 10)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser maior que 10 caracteres"));
                    return false;
                }
                if (instancia.Country.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                else if (instancia.Country.Length >= 15)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser maior que 15 caracteres"));
                    return false;
                }
                if (instancia.HomePhone.Length == 0)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser nulo"));
                    return false;
                }
                else if (instancia.HomePhone.Length >= 24)
                {
                    Mensagens.Add(new RulesMessage(000, "RV_EmployeesBusiness", "O campo não pode ser maior que 24 caracteres"));
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

    }

}
